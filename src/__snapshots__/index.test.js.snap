// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should allow injecting context to components using babel-core 1`] = `
<div>
  <div>
    bar
  </div>
</div>
`;

exports[`should allow injecting context to components using babel-standalone 1`] = `
<div>
  <div>
    bar
  </div>
</div>
`;

exports[`should allow injecting context to elements 1`] = `
<div>
  <div>
    bar
  </div>
</div>
`;

exports[`should allow overriding code element with components version using babel-core 1`] = `
<div>
  <p>
    Hello 
    <div>
      code
    </div>
  </p>
</div>
`;

exports[`should allow overriding code element with components version using babel-standalone 1`] = `
<div>
  <p>
    Hello 
    <div>
      code
    </div>
  </p>
</div>
`;

exports[`should be able to combine in compilation 1`] = `
<div>
  <h1
    id="hey"
  >
    hey
  </h1>
  <ul>
    <li>
      foo
    </li>
  </ul>
  <p>
    -bar
  </p>
</div>
`;

exports[`should be able to compile codespans 1`] = `
<div>
  <p>
    install with 
    <code>
      $ npm install
    </code>
  </p>
</div>
`;

exports[`should be able to compile components using babel-core 1`] = `
<div>
  <div>
    mip
  </div>
</div>
`;

exports[`should be able to compile components using babel-standalone 1`] = `
<div>
  <div>
    mip
  </div>
</div>
`;

exports[`should be able to compile components using marksy language using babel-core 1`] = `
<div>
  <div>
    mip
  </div>
</div>
`;

exports[`should be able to compile components using marksy language using babel-standalone 1`] = `
<div>
  <div>
    mip
  </div>
</div>
`;

exports[`should be able to compile headers 1`] = `
<div>
  <h1
    id="header1"
  >
    header1
  </h1>
  <h2
    id="header1-header2"
  >
    header2
  </h2>
  <h3
    id="header1-header2-header3"
  >
    header3
  </h3>
  <h4
    id="header1-header2-header3-header4"
  >
    header4
  </h4>
</div>
`;

exports[`should be able to compile html 1`] = `
<div>
  <div
    dangerouslySetInnerHTML={
      Object {
        "__html": "<div>hello</div>",
      }
    }
  />
</div>
`;

exports[`should be able to compile html as components using babel-core 1`] = `
<div>
  <div>
    hello
  </div>
</div>
`;

exports[`should be able to compile html as components using babel-standalone 1`] = `
<div>
  <div>
    hello
  </div>
</div>
`;

exports[`should be able to compile image 1`] = `
<div>
  <p>
    <img
      alt="test"
      src="http://some.com/image.png"
    />
  </p>
</div>
`;

exports[`should be able to compile italic text 1`] = `
<div>
  <p>
    hello 
    <em>
      there
    </em>
  </p>
</div>
`;

exports[`should be able to compile links 1`] = `
<div>
  <p>
    <a
      href="http://example.com"
      title={null}
    >
      my link
    </a>
  </p>
</div>
`;

exports[`should be able to compile list 1`] = `
<div>
  <ul>
    <li>
      foo
    </li>
    <li>
      bar
    </li>
  </ul>
</div>
`;

exports[`should be able to compile nested lists 1`] = `
<div>
  <ul>
    <li>
      Colors
      <ul>
        <li>
          Red
        </li>
        <li>
          Blue
        </li>
      </ul>
    </li>
    <li>
      Shape
      <ul>
        <li>
          Triangle
        </li>
        <li>
          Rectangle
        </li>
      </ul>
    </li>
  </ul>
</div>
`;

exports[`should be able to compile ordered list 1`] = `
<div>
  <ol>
    <li>
      foo
    </li>
    <li>
      bar
    </li>
  </ol>
</div>
`;

exports[`should be able to compile strong text 1`] = `
<div>
  <p>
    hello 
    <strong>
      there
    </strong>
  </p>
</div>
`;

exports[`should be able to compile strong text 2`] = `
<div>
  <p>
    hello 
    <strong>
      there
    </strong>
  </p>
</div>
`;

exports[`should be able to compile tables 1`] = `
<div>
  <table>
    <thead>
      <tr>
        <th
          className={undefined}
        >
          Tables
        </th>
        <th
          className="text-center"
        >
          Are
        </th>
        <th
          className="text-right"
        >
          Cool
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td
          className={undefined}
        >
          col 3 is
        </td>
        <td
          className="text-center"
        >
          right-aligned
        </td>
        <td
          className="text-right"
        >
          $1600
        </td>
      </tr>
      <tr>
        <td
          className={undefined}
        >
          col 2 is
        </td>
        <td
          className="text-center"
        >
          centered
        </td>
        <td
          className="text-right"
        >
          $12
        </td>
      </tr>
      <tr>
        <td
          className={undefined}
        >
          zebra stripes
        </td>
        <td
          className="text-center"
        >
          are neat
        </td>
        <td
          className="text-right"
        >
          $1
        </td>
      </tr>
    </tbody>
  </table>
</div>
`;

exports[`should be able to compile text 1`] = `
<div>
  <p>
    hello
  </p>
</div>
`;

exports[`should be able to inline components using babel-core 1`] = `
<div>
  <p>
    Hello there 
    <div>
      Wuuut
    </div>
  </p>
</div>
`;

exports[`should be able to inline components using babel-standalone 1`] = `
<div>
  <p>
    Hello there 
    <div>
      Wuuut
    </div>
  </p>
</div>
`;

exports[`should handle same name nested headers 1`] = `
<div>
  <h1
    id="header1"
  >
    header1
  </h1>
  <h2
    id="header1-header2"
  >
    header2
  </h2>
  <h1
    id="header3"
  >
    header3
  </h1>
  <h2
    id="header3-header2"
  >
    header2
  </h2>
</div>
`;

exports[`should highlight code with Prism.js 1`] = `
<div>
  <pre>
    <code
      className="language-js"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<span class=\\"token keyword\\">const</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"bar\\"</span>",
        }
      }
    />
  </pre>
</div>
`;

exports[`should highlight code with highlight.js 1`] = `
<div>
  <pre>
    <code
      className="language-js"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<span class=\\"hljs-keyword\\">const</span> foo = <span class=\\"hljs-string\\">\\"bar\\"</span>",
        }
      }
    />
  </pre>
</div>
`;

exports[`should produce TOC 1`] = `
"[
  {
    \\"id\\": \\"foo\\",
    \\"title\\": \\"foo\\",
    \\"level\\": 1,
    \\"children\\": [
      {
        \\"id\\": \\"foo-bar\\",
        \\"title\\": \\"bar\\",
        \\"level\\": 2,
        \\"children\\": [
          {
            \\"id\\": \\"foo-bar-baz\\",
            \\"title\\": \\"baz\\",
            \\"level\\": 3,
            \\"children\\": []
          }
        ]
      }
    ]
  }
]"
`;

exports[`should produce custom tags 1`] = `
<div>
  <div>
    foo
  </div>
</div>
`;

exports[`should work with Inferno 1`] = `"<div><div>foo</div></div>"`;

exports[`should work with Preact 1`] = `"<div><div>foo</div></div>"`;
